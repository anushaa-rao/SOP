import time

start = time.time()
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization
from base64 import b16decode


# Loading public key
with open("public.pem", "rb") as key_file:
    public_key = serialization.load_pem_public_key(
        key_file.read()
    )



with open("signature.txt", "r") as f:
    signature = f.read()

signature = bytes(b16decode(signature))

message = ""
with open("message.txt", "r") as f:
    message = f.read()

message = bytes(message, 'utf-8')


public_key.verify(
    signature,
    message,
    padding.PSS(
        mgf=padding.MGF1(hashes.SHA3_256()),
        salt_length=padding.PSS.MAX_LENGTH
    ),
    hashes.SHA3_256()
)

print("Verification Successful")
end = time.time()
print(end - start)
